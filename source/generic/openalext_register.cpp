/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "openalext_autodefs.h"
#include "s3eEdk.h"
#include "openalext.h"
//Declarations of Init and Term functions
extern s3eResult openalextInit();
extern void openalextTerminate();


void openalextRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[23];
    funcPtrs[0] = (void*)_alGetError;
    funcPtrs[1] = (void*)_alSourceQueueBuffers;
    funcPtrs[2] = (void*)_alSourceUnqueueBuffers;
    funcPtrs[3] = (void*)_alGetSourcei;
    funcPtrs[4] = (void*)_alGetSourcef;
    funcPtrs[5] = (void*)_alSourcef;
    funcPtrs[6] = (void*)_alSourcei;
    funcPtrs[7] = (void*)_alSourcePlay;
    funcPtrs[8] = (void*)_alSourceStop;
    funcPtrs[9] = (void*)_alSourcePause;
    funcPtrs[10] = (void*)_alGenSources;
    funcPtrs[11] = (void*)_alDeleteSources;
    funcPtrs[12] = (void*)_alGenBuffers;
    funcPtrs[13] = (void*)_alDeleteBuffers;
    funcPtrs[14] = (void*)_alBufferData;
    funcPtrs[15] = (void*)_alcOpenDevice;
    funcPtrs[16] = (void*)_alcCloseDevice;
    funcPtrs[17] = (void*)_alcCreateContext;
    funcPtrs[18] = (void*)_alcMakeContextCurrent;
    funcPtrs[19] = (void*)_alcProcessContext;
    funcPtrs[20] = (void*)_alcSuspendContext;
    funcPtrs[21] = (void*)_alcDestroyContext;
    funcPtrs[22] = (void*)_alcGetCurrentContext;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[23] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("openalext", funcPtrs, sizeof(funcPtrs), flags, openalextInit, openalextTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int openalextStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&openalextRegisterExt;
    return 0;
}

int g_openalextVal = openalextStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    openalextRegisterExt();
}
#endif

#endif
